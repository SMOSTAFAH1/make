#!/usr/bin/env python3
"""
ü§ñ Instagram Downloader Bot para Telegram
Bot que descarga autom√°ticamente videos de Instagram usando yt-dlp

Uso:
    python bot.py

Caracter√≠sticas:
    ‚úÖ Descarga Reels, Posts, IGTV
    ‚úÖ Powered by yt-dlp (ultra confiable)
    ‚úÖ Manejo autom√°tico de archivos temporales
    ‚úÖ Logs detallados para debugging
"""

import os
import tempfile
import re
import shutil
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ==================== CONFIGURACI√ìN ====================

BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")  

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== DOWNLOADER ====================

class VideoDownloader:
    """Descargador de videos de Instagram, YouTube y TikTok usando yt-dlp"""
    
    def __init__(self):
        # Dominios soportados
        self.supported_domains = {
            'instagram': ['instagram.com', 'www.instagram.com'],
            'youtube': ['youtube.com', 'youtu.be', 'm.youtube.com', 'www.youtube.com'],
            'tiktok': ['tiktok.com', 'vm.tiktok.com', 'vt.tiktok.com', 'www.tiktok.com', 'm.tiktok.com']
        }
    
    def is_supported_url(self, url):
        """Verificar si la URL es de una plataforma soportada"""
        url = url.strip().lower()
        
        # Verificar cada plataforma
        for platform, domains in self.supported_domains.items():
            for domain in domains:
                if domain in url:
                    return True, platform
        
        return False, None
      
    def download(self, video_url):
        """
        Descargar video de Instagram, YouTube o TikTok con configuraci√≥n optimizada
        
        Returns:
            tuple: (ruta_archivo, mensaje) o (None, mensaje_error)
        """
        try:
            import yt_dlp
            
            # Crear directorio temporal
            temp_dir = tempfile.mkdtemp()
            logger.info(f"Descargando: {video_url}")
            
            # Detectar plataforma
            is_supported, platform = self.is_supported_url(video_url)
            if not is_supported:
                return None, "URL no soportada"
            
            # Configurar yt-dlp con opciones espec√≠ficas por plataforma
            ydl_opts = {
                'format': 'best[ext=mp4]/bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best',
                'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
                'noplaylist': True,
                'quiet': False,
                'no_warnings': False,
                'extract_flat': False,
                'writethumbnail': False,
                'writeinfojson': False,
                'ignoreerrors': False,
                'retries': 10,
                'fragment_retries': 10,
                'socket_timeout': 60,
                'http_chunk_size': 10485760,
                'nocheckcertificate': True,
                'prefer_insecure': False,
                'age_limit': None,
                # CR√çTICO: Intentar m√∫ltiples formatos
                'merge_output_format': 'mp4',
                'postprocessors': [{
                    'key': 'FFmpegVideoConvertor',
                    'preferedformat': 'mp4',
                }],
            }
            
            # Configuraciones espec√≠ficas por plataforma
            if platform == 'instagram':
                ydl_opts.update({
                    # Intentar m√∫ltiples formatos de Instagram
                    'format': 'best[ext=mp4]/bestvideo[ext=mp4]+bestaudio/best',
                    'http_headers': {
                        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.9',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Sec-Fetch-Dest': 'document',
                        'Sec-Fetch-Mode': 'navigate',
                        'Sec-Fetch-Site': 'none',
                        'X-IG-App-ID': '936619743392459',
                        'X-ASBD-ID': '198387',
                        'X-IG-WWW-Claim': '0',
                    },
                    # IMPORTANTE: Cookies y age limit para contenido restringido
                    'age_limit': 100,
                    'skip_download': False,
                })
            elif platform == 'youtube':
                ydl_opts.update({
                    'format': 'best[ext=mp4][height<=1080]/bestvideo[ext=mp4]+bestaudio/best',
                    'writesubtitles': False,
                    'writeautomaticsub': False,
                    'http_headers': {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.9',
                    },
                    'age_limit': 100,
                })
            elif platform == 'tiktok':
                ydl_opts.update({
                    'format': 'best[ext=mp4]/bestvideo[ext=mp4]+bestaudio/best',
                    'cookiefile': None,
                    'http_headers': {
                        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',
                        'Referer': 'https://www.tiktok.com/',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.9',
                        'sec-ch-ua': '"Mobile WebKit";v="17", "Safari";v="17", "Not_A Brand";v="24"',
                        'sec-ch-ua-mobile': '?1',
                        'sec-ch-ua-platform': '"iOS"',
                        'sec-fetch-dest': 'document',
                        'sec-fetch-mode': 'navigate',
                        'sec-fetch-site': 'none',
                        'sec-fetch-user': '?1',
                        'upgrade-insecure-requests': '1',
                    },
                    # IMPORTANTE: Ignorar errores de extractor y usar gen√©rico
                    'ignoreerrors': True,
                    'no_check_certificate': True,
                    'prefer_insecure': True,
                    'age_limit': 100,
                })
            
            # Descargar
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                try:
                    ydl.download([video_url])
                except Exception as download_error:
                    # Si falla, intentar con extractor gen√©rico para CUALQUIER plataforma
                    logger.warning(f"Fallo descarga {platform}, intentando con extractor gen√©rico: {download_error}")
                    ydl_opts['force_generic_extractor'] = True
                    # Simplificar formato para extractor gen√©rico
                    ydl_opts['format'] = 'best'
                    try:
                        with yt_dlp.YoutubeDL(ydl_opts) as ydl_generic:
                            ydl_generic.download([video_url])
                    except Exception as generic_error:
                        # √öltimo intento: sin ninguna opci√≥n especial
                        logger.warning(f"Fallo extractor gen√©rico, √∫ltimo intento b√°sico: {generic_error}")
                        basic_opts = {
                            'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
                            'format': 'best',
                            'quiet': True,
                        }
                        with yt_dlp.YoutubeDL(basic_opts) as ydl_basic:
                            ydl_basic.download([video_url])
            
            # Buscar archivo descargado (buscar CUALQUIER extensi√≥n de video)
            video_extensions = ('.mp4', '.mkv', '.webm', '.mov', '.avi', '.flv', '.m4v', '.3gp')
            for file in os.listdir(temp_dir):
                if file.endswith(video_extensions):
                    video_path = os.path.join(temp_dir, file)
                    
                    # Verificar tama√±o del archivo (l√≠mite de Telegram: 50MB)
                    file_size = os.path.getsize(video_path)
                    if file_size > 50 * 1024 * 1024:  # 50MB
                        shutil.rmtree(temp_dir)
                        return None, f"Video muy grande ({file_size:,} bytes). M√°ximo 50MB."
                    
                    # Mover a archivo temporal con nombre fijo
                    final_path = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4').name
                    shutil.move(video_path, final_path)
                    
                    # Limpiar directorio temporal
                    shutil.rmtree(temp_dir)
                    
                    logger.info(f"‚úÖ Descarga exitosa: {file_size} bytes desde {platform}")
                    return final_path, f"Video de {platform.title()} descargado ({file_size:,} bytes)"
            
            # No se encontr√≥ archivo
            shutil.rmtree(temp_dir)
            logger.warning("No se encontr√≥ archivo de video")
            return None, "No se encontr√≥ archivo de video"
                
        except Exception as e:
            logger.error(f"Error descargando: {e}")
            # Limpiar en caso de error
            if 'temp_dir' in locals():
                try:
                    shutil.rmtree(temp_dir)
                except:
                    pass
            return None, f"Error: {str(e)}"

# ==================== BOT HANDLERS ====================

# Instancia global del descargador
downloader = VideoDownloader()

# Diccionario para rastrear descargas activas por usuario
active_downloads = {}

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start"""
    welcome_msg = """
ü§ñ **Video Downloader Bot**

¬°Hola! Env√≠ame un enlace y te descargar√© el video autom√°ticamente.

üì± **Plataformas soportadas:**
‚Ä¢ üì∏ Instagram (Posts, Reels, IGTV)
‚Ä¢ ‚ñ∂Ô∏è YouTube (Videos y Shorts)
‚Ä¢ üéµ TikTok (Videos y efectos)

üöÄ **Uso:**
Solo pega el enlace y yo me encargo del resto!

üîß **Powered by yt-dlp** - Ultra confiable y r√°pido

‚ö° **Caracter√≠sticas:**
‚Ä¢ Reintentos autom√°ticos (hasta 6 intentos)
‚Ä¢ Auto-limpieza de mensajes
‚Ä¢ Soporte para m√∫ltiples formatos
    """.strip()
    
    await update.message.reply_text(welcome_msg)
    logger.info(f"Usuario {update.effective_user.id} inici√≥ el bot")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /stop - Cancelar descarga actual"""
    user_id = update.effective_user.id
    
    if user_id in active_downloads and active_downloads[user_id]:
        active_downloads[user_id] = False
        await update.message.reply_text("üõë **Descarga cancelada**\nPuedes enviar otro enlace.")
        logger.info(f"Usuario {user_id} cancel√≥ su descarga")
    else:
        await update.message.reply_text("‚ÑπÔ∏è No tienes ninguna descarga activa.")

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manejar URLs de videos de Instagram, YouTube y TikTok"""
    url = update.message.text.strip()
    user_id = update.effective_user.id
    
    # Cancelar si ya tiene una descarga activa
    if user_id in active_downloads and active_downloads[user_id]:
        await update.message.reply_text("‚ö†Ô∏è Ya tienes una descarga en proceso. Usa /stop para cancelarla.")
        return
    
    # Marcar descarga como activa
    active_downloads[user_id] = True
    
    # Verificar URL
    is_supported, platform = downloader.is_supported_url(url)
    if not is_supported:
        active_downloads[user_id] = False
        await update.message.reply_text(
            "‚ùå **URL no soportada**\n\n"
            "Por favor, env√≠a un enlace v√°lido de:\n"
            "‚Ä¢ üì∏ Instagram\n"
            "‚Ä¢ ‚ñ∂Ô∏è YouTube\n"
            "‚Ä¢ üéµ TikTok"
        )
        logger.warning(f"Usuario {user_id} envi√≥ URL no soportada: {url}")
        return
    
    # Mensaje de procesamiento
    platform_emoji = {'instagram': 'üì∏', 'youtube': '‚ñ∂Ô∏è', 'tiktok': 'üéµ'}
    processing_msg = await update.message.reply_text(
        f"üîÑ **Procesando {platform_emoji.get(platform, 'üìπ')} {platform.title()}...**\n"
        "Descargando tu video, esto puede tomar unos segundos."
    )
    
    try:
        # Sistema de reintentos INFINITOS - hasta que funcione o usuario diga /stop
        attempt = 0
        video_path = None
        message = ""
        
        while active_downloads.get(user_id, False):
            attempt += 1
            
            # Actualizar mensaje cada intento
            if attempt == 1:
                await processing_msg.edit_text(
                    f"üîÑ **Procesando {platform_emoji.get(platform, 'üìπ')} {platform.title()}...**\n"
                    "Descargando tu video...\n\n"
                    "üí° Usa /stop para cancelar"
                )
            else:
                await processing_msg.edit_text(
                    f"üîÑ **Intento #{attempt} - {platform_emoji.get(platform, 'üìπ')} {platform.title()}**\n"
                    f"Reintentando descarga...\n\n"
                    f"üí° Usa /stop para cancelar"
                )
                logger.info(f"Reintento {attempt} para usuario {user_id} - {platform}")
            
            # Descargar video
            video_path, message = downloader.download(url)
            
            # Si la descarga fue exitosa, salir del bucle
            if video_path and os.path.exists(video_path) and os.path.getsize(video_path) > 0:
                break
            
            # Esperar antes del siguiente intento (incrementa con cada fallo)
            wait_time = min(3 + (attempt * 0.5), 10)  # Max 10 segundos
            await asyncio.sleep(wait_time)
        
        # Verificar si la descarga fue exitosa o si fue cancelada
        if not active_downloads.get(user_id, False):
            # Usuario cancel√≥
            await processing_msg.edit_text("üõë **Descarga cancelada por el usuario**")
            await asyncio.sleep(3)
            await processing_msg.delete()
            await update.message.delete()
            active_downloads[user_id] = False
            return
        
        if video_path and os.path.exists(video_path):
            file_size = os.path.getsize(video_path)
            
            if file_size > 0:
                # Actualizar mensaje
                await processing_msg.edit_text(
                    f"‚úÖ **¬°Descarga exitosa!**\n"
                    f"Tama√±o: {file_size:,} bytes\n"
                    f"Enviando video..."
                )
                
                # Enviar video
                with open(video_path, 'rb') as video_file:
                    await update.message.reply_video(
                        video=video_file,
                        caption=f"{platform_emoji.get(platform, 'ÔøΩ')} **Video de {platform.title()}**\nüîß Powered by yt-dlp"
                    )
                
                # Limpiar archivo
                os.unlink(video_path)
                
                # Eliminar mensaje de procesamiento
                await processing_msg.delete()
                
                # Borrar mensaje original del usuario (solo si fue exitoso)
                try:
                    await update.message.delete()
                    logger.info(f"‚úÖ Mensaje original eliminado para usuario {user_id}")
                except Exception as delete_error:
                    logger.warning(f"No se pudo eliminar mensaje original: {delete_error}")
                
                logger.info(f"‚úÖ Video enviado exitosamente a usuario {user_id} despu√©s de {attempt} intentos")
                active_downloads[user_id] = False
            else:
                # Archivo vac√≠o
                error_msg = await processing_msg.edit_text(
                    f"‚ùå **Error: Archivo vac√≠o**\n"
                    f"Se intent√≥ {attempt} veces sin √©xito.\n"
                    f"Este mensaje se eliminar√° en 10 segundos."
                )
                if video_path:
                    os.unlink(video_path)
                
                active_downloads[user_id] = False
                await asyncio.sleep(10)
                try:
                    await error_msg.delete()
                    await update.message.delete()
                    logger.info(f"üßπ Mensajes limpiados despu√©s de fallo para usuario {user_id}")
                except Exception as cleanup_error:
                    logger.warning(f"No se pudieron limpiar mensajes: {cleanup_error}")
        else:
            # Error de descarga
            error_msg = await processing_msg.edit_text(
                f"‚ùå **Error de descarga**\n"
                f"{message}\n"
                f"Se intent√≥ {attempt} veces.\n"
                f"Este mensaje se eliminar√° en 10 segundos."
            )
            
            active_downloads[user_id] = False
            await asyncio.sleep(10)
            try:
                await error_msg.delete()
                await update.message.delete()
                logger.info(f"üßπ Mensajes limpiados despu√©s de fallo para usuario {user_id}")
            except Exception as cleanup_error:
                logger.warning(f"No se pudieron limpiar mensajes: {cleanup_error}")
            
    except Exception as e:
        logger.error(f"Error procesando mensaje de usuario {user_id}: {e}")
        active_downloads[user_id] = False
        error_msg = await processing_msg.edit_text(
            f"‚ùå **Error inesperado**\n"
            f"Por favor, int√©ntalo de nuevo.\n"
            f"Detalles: `{str(e)}`\n"
            f"Este mensaje se eliminar√° en 10 segundos."
        )
        
        # Esperar 10 segundos y limpiar mensajes
        await asyncio.sleep(10)
        try:
            await error_msg.delete()
            await update.message.delete()
            logger.info(f"üßπ Mensajes limpiados despu√©s de error inesperado para usuario {user_id}")
        except Exception as cleanup_error:
            logger.warning(f"No se pudieron limpiar mensajes: {cleanup_error}")

async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manejar mensajes que no son URLs soportadas"""
    await update.message.reply_text(
        "ü§î **No entiendo ese mensaje**\n\n"
        "Env√≠ame un enlace de video para descargarlo:\n"
        "‚Ä¢ üì∏ Instagram\n"
        "‚Ä¢ ‚ñ∂Ô∏è YouTube\n"
        "‚Ä¢ üéµ TikTok\n\n"
        "Usa /start para ver las instrucciones completas."
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manejar errores del bot"""
    logger.error(f"Error del bot: {context.error}")

# ==================== MAIN ====================

def main():
    """Funci√≥n principal del bot"""
    print("üöÄ Iniciando Video Downloader Bot...")
    print("üì∏ Instagram | ‚ñ∂Ô∏è YouTube | üéµ TikTok")
    print("üîß Presiona Ctrl+C para detener")
    print("-" * 50)
    
    try:
        # Verificar dependencias
        try:
            import yt_dlp
            logger.info("‚úÖ yt-dlp disponible")
        except ImportError:
            logger.error("‚ùå yt-dlp no instalado. Ejecuta: pip install yt-dlp")
            return
        
        # Crear aplicaci√≥n CON CONFIGURACI√ìN ESPECIAL
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .concurrent_updates(True)
            .build()
        )
        
        # A√±adir handlers
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("stop", stop_command))
        application.add_handler(MessageHandler(
            filters.TEXT & (
                filters.Regex(r'.*instagram\.com.*') |
                filters.Regex(r'.*youtube\.com.*') |
                filters.Regex(r'.*youtu\.be.*') |
                filters.Regex(r'.*tiktok\.com.*') |
                filters.Regex(r'.*m\.youtube\.com.*')
            ),
            handle_url
        ))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_other_messages
        ))
        application.add_error_handler(error_handler)
        
        # M√âTODO ANTI-CRASH DEFINITIVO
        logger.info("ü§ñ Bot iniciado con m√©todo anti-crash...")
        
        # Ejecutar con run_polling pero SIN CLEANUP
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            close_loop=False,
            stop_signals=None  # CR√çTICO: Esto evita el error
        )
        
    except KeyboardInterrupt:
        print("\nüëã Bot detenido por el usuario")
        logger.info("Bot detenido por el usuario")
    except Exception as e:
        print(f"‚ùå Error cr√≠tico: {e}")
        logger.error(f"Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
